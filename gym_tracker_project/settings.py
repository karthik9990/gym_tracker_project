"""
Django settings for gym_tracker_project project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# gym_tracker_project/settings.py


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-m4ase!_7(39gz_ya32g#9*e3o&5hu!oxj@+@x=5*@i$yg(jbg!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # allauth and its components
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # Google provider
    'allauth.socialaccount.providers.google',

    # Your apps
    'workouts',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # 'workouts.middleware.TimezoneMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'gym_tracker_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gym_tracker_project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Regina'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # Path to the project-wide static directory
]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# gym_tracker_project/settings.py (at the bottom)
LOGIN_REDIRECT_URL = '/workouts/'  # Redirect to the log page after login
LOGOUT_REDIRECT_URL = '/'  # Redirect to home page (or login page) after logout

# Account settings

#ACCOUNT_LOGIN_METHODS = ["email"]
ACCOUNT_LOGIN_METHODS = ["username", "email"] # Allow login with EITHER username OR email
ACCOUNT_EMAIL_VERIFICATION = 'optional'  # Or 'mandatory' or 'none' - 'optional' is good to start
ACCOUNT_UNIQUE_EMAIL = True


# Social Account settings
SOCIALACCOUNT_AUTO_SIGNUP = True  # Automatically sign up users if they authenticate via social provider
SOCIALACCOUNT_EMAIL_REQUIRED = True  # Inherit email requirement
SOCIALACCOUNT_QUERY_EMAIL = True  # Ask provider for email
SOCIALACCOUNT_STORE_TOKENS = False  # Don't store social tokens unless needed

# Provider specific settings (we'll add Google keys later)
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        # This specifies the scopes (permissions) your app requests from Google.
        # 'profile' and 'email' are standard for login.
        'SCOPE': [
            'profile',
            'email',
        ],
        # How to authenticate - 'oauth2' is standard for Google
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        # Tell allauth only to use OpenID Connect for Google
        'OAUTH_PKCE_ENABLED': True,
    }
}

# CACHES Configuration (Add this section if it doesn't exist)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',  # Can be any unique name for this cache instance
    }
}

# SESSION ENGINE Configuration
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'  # Tells the session engine to use the cache named 'default'

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, e.g. login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1
